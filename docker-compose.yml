services:
  db:
    image: postgres:15
    container_name: bluesky-db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres   # keep the default
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d   # mount init scripts

  api:
    build: ./api
    container_name: bluesky-api
    command: gunicorn -b 0.0.0.0:8000 app:app
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/bluesky
    ports:
      - "8000:8000"
    depends_on:
      - db

  scraper:
    build: ./scraper
    image: bluesky-scraper:latest
    container_name: bluesky-scraper
    command: python runner.py
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/bluesky
    depends_on:
      - db
    
  frontend:
    build: ./frontend
    container_name: bluesky-frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://api:8000
    depends_on:
      - api


  airflow:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    container_name: bluesky-airflow
    restart: always
    environment:
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__CORE__EXECUTOR=SequentialExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://postgres:postgres@db:5432/airflow
    volumes:
      - ./dags:/opt/airflow/dags
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8080:8080"
    depends_on:
      - db
    command: >
      bash -c "
      airflow db init &&
      airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com &&
      airflow webserver -p 8080 & airflow scheduler
      "

volumes:
  db_data: