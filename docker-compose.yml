services:
  db:
    image: postgres:15
    container_name: bluesky-db
    restart: always
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      retries: 5

  api:
    build: ./api
    container_name: bluesky-api
    command: gunicorn -b 0.0.0.0:8000 app:app
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "127.0.0.1:8000:8000"

  scraper:
    build: ./scraper
    image: bluesky-scraper:latest
    container_name: bluesky-scraper
    command: python runner.py
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy

  frontend:
    build: ./frontend
    container_name: bluesky-frontend
    env_file:
      - ./frontend/.env.local
    depends_on:
      - api
    ports:
      - "127.0.0.1:3000:3000"

  airflow-scheduler:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    container_name: bluesky-airflow-scheduler
    restart: always
    env_file:
      - .env
    volumes:
      - ./dags:/opt/airflow/dags
      - airflow_logs:/opt/airflow/logs
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      db:
        condition: service_healthy
    command: >
      bash -c "
      airflow db migrate &&
      airflow users create --username perfectgb2 --password TheRealKiller1 --firstname Admin --lastname User --role Admin --email admin@example.com || true &&
      airflow scheduler
      "

  airflow-webserver:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    container_name: bluesky-airflow-web
    restart: always
    env_file:
      - .env
    volumes:
      - ./dags:/opt/airflow/dags
      - airflow_logs:/opt/airflow/logs
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      db:
        condition: service_healthy
      airflow-scheduler:
        condition: service_started
    ports:
      - "127.0.0.1:8080:8080"
    command: >
      bash -c "
      airflow webserver
      "

volumes:
  db_data:
  airflow_logs:
